#!/usr/bin/env zsh

source "${_PH_MARKS_PLUGIN_DIR}/src/ph-marks.zsh"


_PH_VIEW_LINK='https://www.pornhub.com/view_video.php?viewkey='


.ph_count_intersections() {
    comm -12 <(sort <<<"${1}") <(sort <<<"${2}") | wc --words
}


.ph_parse_argument_to_link() {
    local argument=${1}
    # If argument is already a link - return it
    if [[ ${argument} == *"${_PH_VIEW_LINK}"*  ]]; then
        echo "${argument}"
    # if it seems to be a viewkey - convert it to a link
    elif .ph_is_viewkey "${argument}"; then
        echo "${_PH_VIEW_LINK}${argument}"
    # otherwise fail
    else
        return 1
    fi
}


.ph_add_single() {
    local argument=$1
    # Convert argument to a link
    local link
    if ! link=$(.ph_parse_argument_to_link "${argument}"); then
        echo "Impossible viewkey/video link: ${argument}" >&2
        return 1
    fi
    # Viewkey is a number in a link after `=`
    local viewkey=${link#*=}
    # Create                 ~/.pornhub
    # Save video thumbnail   ~/.pornhub/ph123456789abcd.jpg
    # and file with metadata ~/.pornhub/ph123456789abcd.info.json
    # if not yet saved
    youtube-dl --write-info-json \
               --write-thumbnail \
               --skip-download \
               --no-overwrites \
               --quiet \
               --output "${PH_MARKS_HOME}/${viewkey}" \
               -- "${link}" 2>/dev/null
}


.ph_add() {
    # Add each passed viewkey/link, running the jobs concurrently
    # with PH_MARKS_PARALLELIZATION=5
    # Source:
    #     https://unix.stackexchange.com/a/436713
    for argument in "$@"; do
        # Download in background
        ( if ! .ph_add_single "${argument}"; then
            echo "Could not parse and download \"${argument}\"" >&2
        fi ) &
        # Allow only to execute PH_MARKS_PARALLELIZATION jobs in parallel
        if [[ $(jobs -r -p | wc -l) -gt ${PH_MARKS_PARALLELIZATION} ]]; then
            # wait only for first job
            wait -n
        fi
    done
    # Wait for pending jobs
    wait
}


.ph_delete() {
    while read -r viewkey; do
        rm --verbose -- "${PH_MARKS_HOME}/${viewkey}"* >&2
    done < <(.ph_stdin_viewkeys || .ph_args_viewkeys "$@")
}


.ph_keys() {
    local keys=$1
    # Categories we want to search
    local categories_in_cmd=${*:2}
    categories_in_cmd=${categories_in_cmd// /$'\n'}

    local categories_in_file
    local rating
    local viewkey
    # How much the video matches the categories we search
    while read -r viewkey; do
        # Categories listed in current file
        categories_in_file=$(jq --raw-output ".${keys} | .[]" -- "${PH_MARKS_HOME}/${viewkey}.info.json")
        categories_in_file=$(.ph_slugify "${categories_in_file}")
        # Get intersection of categories we search
        # and categories we have listed in file
        rating=$(.ph_count_intersections "${categories_in_cmd}" "${categories_in_file}")
        if (( rating != 0 )); then
            echo "${viewkey}"
        fi
    done < <(.ph_stdin_viewkeys || .ph_files_viewkeys)
}


.ph_pretty_print() {
    { .ph_stdin_viewkeys || .ph_files_viewkeys } |
    if [[ -t 1 ]]; then
        local title
        local video_id
        while read -r video_id; do
            printf '%s %s\n' \
                "${_PH_VIEW_LINK}${video_id}" \
                "$(jq '.title' -- "${PH_MARKS_HOME}/${video_id}.info.json")"
        done
    else
        cat
    fi
}


.ph_title() {
    # Categories we want to search
    local search=$*
    search=$(.ph_slugify "${search}")

    local title
    local viewkey
    # How much the video matches the categories we search
    while read -r viewkey; do
        # Categories listed in current file
        title=$(jq --raw-output '.title' -- "${PH_MARKS_HOME}/${viewkey}.info.json")
        title=$(.ph_slugify "${title}")

        if [[ ${title} =~ "${search}" ]]; then
           echo "${viewkey}"
        fi
    done < <(.ph_stdin_viewkeys || .ph_files_viewkeys)
}


.ph_browser_cmd() {
    local browser
    # Find out default browser
    if [[ -n ${BROWSER} ]]; then
        browser=${BROWSER}
    elif (( $+commands[xdg-settings] )); then
        browser=${$(BROWSER= xdg-settings get default-web-browser)/.desktop/}
    else
        echo "No browser set via either XDG or \$BROWSER" >&2
        return 1
    fi
    # Add a --private/--incognito flag to the browser command
    case "${browser}" in
        *fox)
            echo "${browser} --private";;
        brave*|chrom*)
            echo "${browser} --incognito";;
        tor*)
            echo "${browser}";;
        *)
            echo "How do we open a private window in your browser?" >&2
            return 1
            ;;
    esac
}


.ph_open() {
    local viewkeys
    viewkeys=($(.ph_stdin_viewkeys || .ph_args_viewkeys "$@"))
    local links
    links=($(for viewkey in "${viewkeys[@]}"; do
        echo "${_PH_VIEW_LINK}${viewkey}"
    done))
    local browser
    browser=(${PH_MARKS_BROWSER_CMD:-$(.ph_browser_cmd)})
    nohup ${browser[@]} ${links[@]} &>/dev/null &
}


.ph_fzf() {
    "${_PH_MARKS_PLUGIN_DIR}/src/fzfimg" main \
        < <(.ph_stdin_viewkeys || .ph_files_viewkeys)
}


ph() {
    if   [[ add      == $1* ]]; then
        .ph_add "${@:2}"
    elif [[ category == $1* ]]; then
        .ph_keys categories "${@:2}"
    elif [[ delete   == $1* ]]; then
        .ph_delete "${@:2}"
    elif [[ list     == $1* || ls == $1 || lst == $1 ]]; then
        .ph_files_viewkeys
    elif [[ open     == $1* ]]; then
        .ph_open "${@:2}"
    elif [[ t        == $1  ]]; then
        echo '"tag" or "title"?' >&2
        return 1
    elif [[ tag      == $1* ]]; then
        .ph_keys tags "${@:2}"
    elif [[ title    == $1* ]]; then
        .ph_title "${@:2}"
    elif [[ fuzzy    == $1* || fzf == $1* ]]; then
        .ph_fzf
    fi |
        .ph_pretty_print
}


ph "${@}"
